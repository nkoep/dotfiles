#!/bin/sh

set -o errexit

die() {
  echo $*
  exit 1
}

add_npm_script() {
  key="$1"
  value="$2"
  jq ".scripts[\"$key\"] = \"$value\"" package.json.tmp \
    | sponge package.json.tmp
}

# Check for npm, yarn and jq
for p in npm yarn jq sponge; do
  command -v $p >/dev/null 2>&1 || { die "\`$p\` not found in PATH"; }
done

mkdir -p src/{js,sass}

# Initialize the repository.
npm init

# Install webpack.
yarn add --dev webpack webpack-dev-server webpack-cli

# Install babel with the necessary polyfills for await/async.
yarn add --dev @babel/core babel-loader @babel/preset-env core-js \
  regenerator-runtime

# Install SASS/CSS loaders, autoprefixers, etc.
yarn add --dev node-sass sass-loader css-loader style-loader autoprefixer \
  postcss-loader postcss-preset-env

# Install convenience utilities.
yarn add --dev source-map html-webpack-plugin clean-webpack-plugin eslint

# Add NPM scripts.
cp package.json package.json.tmp
add_npm_script "dev" "webpack-dev-server --watch --open firefox"
add_npm_script "lint" "eslint src"
add_npm_script "build" "webpack --progress --mode=production"
mv package.json.tmp package.json

# Configure webpack.
cat <<'EOF' > webpack.config.js
const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const { CleanWebpackPlugin } = require("clean-webpack-plugin");

module.exports = (env, argv) => ({
  mode: "development",
  entry: ["./src/index.js", "./src/sass/main.scss"],
  output: {
    path: path.resolve(__dirname, "public"),
    filename: "app.js",
    publicPath: "/"
  },
  devtool: argv.mode === "development" ? "source-map" : false,
  devServer: {
    contentBase: "./public"
  },
  watch: false,
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: "babel-loader",
          options: {
            presets: ["@babel/preset-env"]
          }
        }
      },
      {
        test: /\.s[ac]ss$/i,
        use: ["style-loader", "css-loader", "postcss-loader", "sass-loader"]
      }
    ]
  },
  plugins: [
    new CleanWebpackPlugin(),
    new HtmlWebpackPlugin({
      template: "./src/index.html"
    })
  ]
});
EOF

# Configure PostCSS.
cat <<'EOF' > postcss.config.js
module.exports = {
  plugins: [
    require("autoprefixer")
  ]
}
EOF

# Configure ESLint.
cat <<'EOF' > .eslintrc.js
module.exports = {
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": "eslint:recommended",
  "globals": {
    "Atomics": "readonly",
    "SharedArrayBuffer": "readonly"
  },
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "rules": {
  }
};
EOF

# Create stubs for main.scss and index.js.
echo "body {}" > src/sass/main.scss
cat <<'EOF' > src/index.js
import "core-js/stable";
import "regenerator-runtime/runtime";

import "./sass/main.scss;"
EOF

# Create stub for index.html.
cat <<'EOF' > src/index.html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
  </head>

  <body>
    <div id="app"></div>
  </body>
</html>
EOF
