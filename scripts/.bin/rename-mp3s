#!/usr/bin/env python

import sys
import os
import re
import argparse
import struct

from mutagen import MutagenError
from mutagen.mp3 import MP3
from mutagen.id3 import ID3


def die(msg):
    print(f"error: {msg}")
    sys.exit(1)


def parse_id3v1(path):
    with open(path, "rb") as f:
        f.seek(-128, os.SEEK_END)
        string = f.read(128)

    frames = ID3()
    try:
        tag, title, artist, album, year, _, track, genre = \
            struct.unpack("3s30s30s30s4s29sBB", string)
    except struct.error:
        return frames

    if tag != "TAG":
        return frames

    def fix_encoding(s):
        return s.split("\x00")[0].strip()

    title, artist, album, year, comment = list(map(
        fix_encoding, [title, artist, album, year, comment]))

    if title:
        frames["TIT2"] = id3.TIT2(text=title)
    if artist:
        frames["TPE1"] = id3.TPE1(text=[artist])
    if album:
        frames["TALB"] = id3.TALB(text=album)
    if year:
        frames["TDRC"] = id3.TDRC(text=year)
    if track and (track != 32 or string[-3] == "\x00"):
        frames["TRCK"] = id3.TRCK(text=str(track))
    if genre != 255:
        frames["TCON"] = id3.TCON(text=str(genre))
        frames["TCON"].text = frames["TCON"].genres

    return frames


def build_prefix(track, disc, skip_disc):
    def split_and_convert(s):
        try:
            return int(s.split("/")[0])
        except (ValueError, IndexError, AttributeError):
            return ""
        return s
    track, disc = map(split_and_convert, (track, disc))
    if skip_disc:
        return f"{track:02d}"
    return f"{disc}{track:02d}"


def build_filename(mp3, path, skip_disc):
    tags = mp3.tags or id3.ID3()
    tags_id3v1 = None

    tag_mapping = {
        "TPE1": "artist",
        "TIT2": "title",
        "TRCK": "track_number",
        "TPOS": "disc_number"
    }
    values = {}
    for tag, attr in tag_mapping.items():
        try:
            frame = tags.getall(tag)[0]
        except IndexError:
            if tags_id3v1 is None:
                tags_id3v1 = parse_id3v1(path)
            try:
                frame = tags_id3v1.getall(tag)[0]
            except IndexError:
                continue
        value = frame.text
        values[attr] = value[0]

    def clean_string(s):
        return re.sub(r"[ ]", "_", re.sub("[^a-zA-Z0-9 ]", "", s))

    prefix = build_prefix(
        values.get("track_number"), values.get("disc_number"), skip_disc)
    artist = clean_string(values.get("artist")).lower()
    title = clean_string(values.get("title")).lower()
    return f"{prefix}-{artist}-{title}.mp3"


def rename_files(directory, mapping):
    for newname, oldname in sorted(mapping.items(), key=lambda v: v[0]):
        os.rename(
            *map(lambda f: os.path.join(directory, f), (oldname, newname)))


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("directory", nargs=1, help="target directory")
    parser.add_argument("-s", help="skip disc prefix", default=False,
                        required=False, action="store_true", dest="skip_disc")
    return vars(parser.parse_args())


def main():
    args = parse_args()

    directory = args["directory"][0]
    if not os.path.isdir(directory):
        die(f"'{directory} is not a directory")

    tracks = {}
    for f in os.listdir(directory):
        try:
            mp3 = MP3(os.path.join(directory, f))
        except MutagenError as exc:
            print(f"Skipping file '{f}': {exc}")
            continue
        tracks[f] = mp3

    mapping = {}
    for f in sorted(tracks.keys()):
        audio = tracks[f]
        filename = build_filename(
            audio, os.path.join(directory, f), skip_disc=args["skip_disc"])
        mapping[filename] = f

    print()
    if not mapping:
        print("No mp3s found")
        sys.exit(0)

    header = "New filenames:"
    print(header)
    print("-" * len(header))
    print()
    for newname, oldname in sorted(mapping.items(), key=lambda v: v[0]):
        print(f"{oldname}   â†’   {newname}")
    print()

    answer = input("Confirm? [Y/n] ") or "y"
    if answer == "y":
        rename_files(directory, mapping)
        print("Done")
    elif answer == "n":
        print("Aborting")
    else:
        die(f"Invalid choice: '{answer}'")


if __name__ == "__main__":
    main()
