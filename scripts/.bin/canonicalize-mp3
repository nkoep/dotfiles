#!/usr/bin/env python

import sys
import os
import shutil
import re
import argparse
import struct
import signal
import collections

from mutagen import MutagenError
from mutagen.mp3 import MP3
from mutagen import id3
from unidecode import unidecode
from titlecase import titlecase


quiet = False

TRACK_FIELDS = ("path", "disc", "track", "artist", "album_artist", "title",
                "album", "year", "genre")
TAG_MAPPING = {
    "TPOS": "disc",
    "TRCK": "track",
    "TPE1": "artist",
    "TPE2": "album_artist",
    "TIT2": "title",
    "TALB": "album",
    "TDRC": "date",
    "TCON": "genre"
}

TITLECASE_EXCEPTIONS = (
    "xx",
    "XX",
    "blink-182",
    "amo"
)


class Track(collections.namedtuple("Track", TRACK_FIELDS)):
    def __repr__(self):
        lines = []
        for f in TRACK_FIELDS[1:]:
            value = getattr(self, f)
            if value is None:
                value = "<none>"
            lines.append(f"{f}: {value}")
        return "\n".join(lines)


def print_d(msg=None):
    if not quiet:
        if msg is None:
            print()
        else:
            print(msg)


def warn(msg):
    print(f"Warning: {msg}")


def die(msg):
    print(f"Error: {msg}")
    sys.exit(1)


def make_titlecase(s):
    def handle_exceptions(w, all_caps=False):
        if w in TITLECASE_EXCEPTIONS:
            return w
        w_lower = w.lower()
        if w_lower in ("feat.", "ft."):
            return "feat."
        if w_lower in ("(feat.", "(ft."):
            return "(feat."
        if all_caps:
            return w
        return None  # Let titlecase process the word as usual.

    return titlecase(s, callback=handle_exceptions)


def parse_id3v1(path):
    with open(path, "rb") as f:
        f.seek(-128, os.SEEK_END)
        string = f.read(128)

    frames = id3.ID3()
    try:
        tag, title, artist, album, year, _, track, genre = \
            struct.unpack("3s30s30s30s4s29sBB", string)
    except struct.error:
        return frames

    if tag != "TAG":
        return frames

    def fix_encoding(s):
        return s.split("\x00")[0].strip()

    title, artist, album, year, genre = list(map(
        fix_encoding, [title, artist, album, year, genre]))

    if title:
        frames["TIT2"] = id3.TIT2(text=title)
    if artist:
        frames["TPE1"] = id3.TPE1(text=artist)
    if album:
        frames["TALB"] = id3.TALB(text=album)
    if year:
        frames["TDRC"] = id3.TDRC(text=year)
    if track and (track != 32 or string[-3] == "\x00"):
        frames["TRCK"] = id3.TRCK(text=str(track))
    if genre != 255:
        frames["TCON"] = id3.TCON(text=str(genre))
        frames["TCON"].text = frames["TCON"].genres

    return frames


def strip_extra_whitespace(string):
    return " ".join(string.split())


def clean_string(s):
    s = unidecode(s)
    s = re.sub(r"[\-/\.]", " ", s)
    fragments = s.split()
    fragments = map(lambda f: "and" if f == "&" else f, fragments)
    s = "_".join(fragments)
    s = re.sub("[^a-zA-Z0-9 _]", "", s)
    s = re.sub("[_]+", "_", s)
    return s


def gather_facts(path):
    if not path.endswith(".mp3"):
        return None
    try:
        mp3 = MP3(path)
    except MutagenError:
        return None

    tags = mp3.tags or id3.ID3()
    tags_id3v1 = None
    values = {}
    for tag, attr in TAG_MAPPING.items():
        try:
            frame = tags.getall(tag)[0]
        except IndexError:
            if tags_id3v1 is None:
                tags_id3v1 = parse_id3v1(path)
            try:
                frame = tags_id3v1.getall(tag)[0]
            except IndexError:
                continue
        value = frame.text
        values[attr] = value[0]

    def split_disc_track_number(s):
        try:
            return int(s.split("/")[0])
        except (ValueError, IndexError, AttributeError):
            pass
        return None

    def extract_year(date):
        try:
            date_fragments = date.split()[0].split("-")
        except AttributeError:
            return None
        if len(date_fragments) == 1:
            year = date
        else:
            year = ""
            for fragment in date_fragments:
                if len(fragment) > len(year):
                    year = fragment
        try:
            return int(year)
        except TypeError:
            pass
        return None

    def ensure_tag(tag):
        if tag not in values:
            die(f"No '{tag}' tag defined for file '{path}'")

    def transform(string):
        if string is None:
            return string
        return make_titlecase(strip_extra_whitespace(string))

    disc = split_disc_track_number(values.get("disc"))
    track = split_disc_track_number(values.get("track"))
    ensure_tag("artist")
    artist = transform(values.get("artist"))
    album_artist = transform(values.get("album_artist"))
    ensure_tag("title")
    title = transform(values.get("title"))
    ensure_tag("album")
    album = transform(values.get("album"))
    try:
        date = values.get("date").get_text()
    except AttributeError:
        date = None
    year = extract_year(date)
    genre = strip_extra_whitespace(values.get("genre", ""))

    return Track(path=path, disc=disc, track=track, artist=artist,
                 album_artist=album_artist, title=title, album=album,
                 year=year, genre=genre)


def build_filename(track, has_single_disc):
    artist = clean_string(track.artist).lower()
    title = clean_string(track.title).lower()
    prefix = ""
    if track.track is not None:
        if not has_single_disc:
            prefix = f"{track.disc}"
        prefix += f"{track.track:02d}-"
    return f"{prefix}{artist}-{title}.mp3"


def rename_files(directory, mapping):
    for f, new_f in sorted(mapping.items(), key=lambda i: i[0]):
        os.rename(*map(lambda f: os.path.join(directory, f), (f, new_f)))


def canonicalize_path(p):
    return os.path.realpath(os.path.expanduser(p))


def prompt_action(question, always_yes, callback):
    if always_yes:
        callback()
        return True

    answer = input(f"{question} [Y/n] ").lower() or "y"
    if answer == "y":
        callback()
        print_d("Done")
        print_d()
        return True
    print_d()
    return False


def retag_mp3s(files):
    for track in files.values():
        audio = MP3(track.path)
        tags = audio.tags
        tags.update_to_v24()

        # Remove tags we don't care for.
        for key in list(tags.keys()):
            if key not in TAG_MAPPING:
                tags.delall(key)

        # We don't need to test for the presence of artist, title and album
        # tags as we should have error'd out earlier if a track lacks them.
        tags.get("TPE1").text = [track.artist]
        tags.get("TIT2").text = [track.title]
        tags.get("TALB").text = [track.album]

        # XXX: We assume all tags have the same encoding.
        encoding = tags.get("TPE1").encoding

        tags.delall("TPOS")
        if track.disc is not None:
            tag = id3.TPOS(encoding=encoding, text=str(track.disc))
            tags.add(tag)

        # Add the track number if we have one.
        tags.delall("TRCK")
        if track.track is not None:
            tag = id3.TRCK(encoding=encoding, text=str(track.track))
            tags.add(tag)

        # Add an album artist if we have one.
        tags.delall("TPE2")
        if track.album_artist is not None:
            tag = id3.TPE2(encoding=encoding, text=track.album_artist)
            tags.add(tag)

        # Update the year tag if we have one.
        tags.delall("TDRC")
        if track.year is not None:
            tag = id3.TDRC(encoding=encoding, text=str(track.year))
            tags.add(tag)

        # Update the genre tag if we have one.
        tags.delall("TCON")
        if track.genre is not None:
            tag = id3.TCON(encoding=encoding, text=track.genre)
            tags.add(tag)

        audio.save()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument("directory", nargs=1, help="target directory")
    parser.add_argument("-y", help="answer yes to every query", default=False,
                        required=False, action="store_true", dest="always_yes")
    parser.add_argument("-o", help="output directory", required=False,
                        dest="output_directory")
    return vars(parser.parse_args())


def main():
    args = parse_args()

    (directory,) = args.get("directory")
    if not os.path.isdir(directory):
        die(f"'{directory} is not a directory")
    directory = canonicalize_path(directory)

    if os.getcwd() == directory:
        die("Cannot operate inside working directory")

    output_directory = args.get("output_directory")
    if output_directory is not None:
        output_directory = canonicalize_path(output_directory)
        if not os.path.isdir(output_directory):
            die(f"Output directory '{output_directory}' does not exist")
        new_directory = os.path.join(
            output_directory, os.path.basename(directory))
        if not os.path.isdir(new_directory):
            shutil.copytree(directory, new_directory)
        directory = new_directory

    always_yes = args.get("always_yes")
    global quiet
    quiet = always_yes

    # Extract and parse relevant information from all tracks.
    tracks = {}
    for f in os.listdir(directory):
        path = os.path.join(directory, f)
        track = gather_facts(path)
        if track is None:
            print_d(f"Skipping file '{f}'")
            continue
        tracks[f] = track

    if not tracks:
        print_d("No tracks to process")
        sys.exit(0)

    # Check value consistency.
    missing_disc = []
    missing_track = []
    discs = set()
    artists = set()
    album_artists = set()
    albums = set()
    years = set()
    for f, track in tracks.items():
        if track.disc is None:
            missing_disc.append(f)
        if track.track is None:
            missing_track.append(f)
        discs.add(track.disc)
        artists.add(track.artist)
        album_artists.add(track.album_artist)
        albums.add(track.album)
        years.add(track.year)

    if missing_disc and len(missing_disc) != len(tracks):
        die("Inconsistent disc number specifications!")
    if missing_track:
        if len(missing_track) != len(tracks):
            die("Inconsistent track number specifications!")
        else:
            warn("No track numbers available!")
    if len(album_artists) != 1 and len(artists) != 1:
        die(f"Inconsistent album artist! Values are: {album_artists}")
    if len(albums) > 1:
        die(f"Album title is not unique! Values are: {albums}")
    if len(years) > 1:
        die(f"Inconsistent year values! Values are: {years}")
    if len(years) == 1 and None in years:
        warn("No year information available!")

    # Strip any "(feat. xyz)" annotations from the title and append them to the
    # artist.
    modified_artist = False
    for f in tracks.keys():
        track = tracks[f]
        match = re.search(r"(.*) (\(feat. .*\))$", track.title)
        if match:
            title, featuring = match.groups()
            title = title.strip()
            featuring = featuring.strip("()").strip()
            new_track = track._replace(artist=f"{track.artist} {featuring}",
                                       title=title)
            # XXX: Replacing the value in a loop is fine as the iteration order
            #      is determined by .keys().
            tracks[f] = new_track
            modified_artist = True

    if len(artists) == 1:
        # We modified an artist above, so use the previously unique artist as
        # album artist from now on.
        if modified_artist:
            album_artist = artists.pop()
        else:
            album_artist = None
    else:
        album_artist = album_artists.pop()
        if album_artist is None:
            album_artist = "VA"
    has_single_disc = len(discs) == 1

    # Update the disc and album artist fields.
    for f in tracks.keys():
        track = tracks[f]
        if has_single_disc:
            disc = None
        else:
            disc = track.disc
        tracks[f] = track._replace(album_artist=album_artist, disc=disc)

    # Retag files.
    header = "New tags:"
    print_d(header)
    print_d("-" * len(header))
    print_d()
    for f, track in sorted(tracks.items(), key=lambda i: i[0]):
        print_d(f"filename: {f}")
        print_d(track)
        print_d()
    prompt_action("Retag files?", always_yes, lambda: retag_mp3s(tracks))

    # Rename mp3s.
    mapping = {}
    for f, track in sorted(tracks.items(), key=lambda i: i[0]):
        mapping[f] = build_filename(track, has_single_disc)

    header = "New filenames:"
    print_d(header)
    print_d("-" * len(header))
    print_d()
    for f, new_f in sorted(mapping.items(), key=lambda i: i[0]):
        try:
            print_d(f"{f}   →   {new_f}")
        except UnicodeError:
            print_d(f"{f.encode('utf-8', 'surrogateescape')}   →   "
                    f"{new_f}")
    print_d()
    prompt_action("Rename files?", always_yes,
                  lambda: rename_files(directory, mapping))

    # Rename directory.
    dirname = os.path.dirname(directory)
    basename = os.path.basename(directory)
    if album_artist is None:
        album_artist = artists.pop()
    album = albums.pop()
    year = years.pop()
    suffix = ""
    if year is not None:
        suffix = f"-{year}"

    def upperfirst(s):
        head, *tail = s
        return head.upper() + "".join(tail)

    album_artist = upperfirst(clean_string(album_artist))
    album = upperfirst(clean_string(album))
    new_directory = (f"{album_artist}-{album}{suffix}")
    prompt_action(
        f"Rename directories: '{basename}'   →   '{new_directory}'?",
        always_yes,
        lambda: os.rename(directory, os.path.join(dirname, new_directory)))


if __name__ == "__main__":
    signal.signal(signal.SIGINT, lambda *_: sys.exit(1))
    main()
